{"name":"ngDefine","tagline":"A friendly integration of AngularJS into RequireJS powered applications","body":"This project seamlessly integrates [AngularJS](http://angularjs.org/) into [RequireJS](http://requirejs.org/) based applications.\r\n\r\n\r\nOverview\r\n========\r\n\r\nUsing __ngDefine__ you can leverage [RequireJS](http://requirejs.org/) to package [AngularJS](http://angularjs.org/) modules into reusable components.\r\n\r\n```javascript\r\nngDefine('my.module', [\r\n  'jquery',\r\n  './bar',\r\n  'module:ngResource',\r\n  'module:my.other.module:my-other-module'\r\n], function(module, $) {\r\n\r\n  // define the module\r\n  module.value(\"foo\", \"bar\");\r\n});\r\n```\r\n\r\n__ngDefine__ allows you to declare both plain RequireJS dependencies and AngularJS modules that get resolved using [RequireJS](http://requirejs.org) before the module definition callback is called.\r\n\r\nIt instantiates the AngularJS module with dependencies to other modules that may be [declared](#declare-angularjs-dependencies) via `module:[moduleName]:[moduleLocation]`.\r\n\r\nThe library supports [minification](#minification) that reduces module definitions to plain AngularJS / RequireJS. \r\n\r\n\r\nModule Definition<a id=\"ngDefine\"></a>\r\n======================================\r\n\r\nAngularJS modules are defined via the __ngDefine__ function:\r\n\r\n```javascript\r\nngDefine('app', function(module) {\r\n  \r\n  // module => { .., name: 'app', .. }\r\n  module.value('foo', 'bar');\r\n});\r\n```\r\n\r\n\r\n### ngDefine\r\n\r\nThe function accepts a module name, an optional list of module dependencies and a module definition body. \r\nThe list of dependencies may contain AngularJS module dependencies in the form \r\n`module:{angularModuleName}[:{requireJsPath}]`.\r\n\r\nThe optional `requireJsPath` is used to map the AngularJS module to a RequireJS location. \r\nIf no path is given, the RequireJS path is produced by replacing all `.` with `/`. \r\n\r\n\r\n### Full Example\r\n\r\n```javascript\r\nngDefine('app', [\r\n  // require normal requireJS packages\r\n  'angular',\r\n  'jquery',\r\n\r\n  // require package local files\r\n  './foo',\r\n\r\n  // require angular modules\r\n  'module:ngResource:angular-resource',\r\n  'module:my.module.bar:my-module/bar',\r\n  'module:my.other.module:my-other-module',\r\n\r\n  // require without a require js path -> locates the module under\r\n  // foo/baz\r\n  'module:foo.baz'\r\n],\r\nfunction(module, angular, jquery) {\r\n  // callback gets passed the defined module as the first\r\n  // parameter, all other objects defined by declared\r\n  // dependencies follow at parameters 1..n\r\n\r\n  module // --> { .., name: 'app', .. }\r\n\r\n  // define module now\r\n  module.value(\"foo\", \"bar\");\r\n});\r\n```\r\n\r\n\r\nProject Configuration\r\n=====================\r\n\r\nA require configuration using __ngDefine__ / AngularJS may look as follows:\r\n\r\n```javascript\r\nrequire({\r\n  paths: {\r\n    // include ngDefine script in path\r\n    'ngDefine' : 'lib/ngDefine', \r\n    'angular' : 'lib/angular/angular',\r\n\r\n    // optional dependencies\r\n    'angular-resource' : 'lib/angular/angular-resource'\r\n    'jquery' : 'lib/jquery/jquery'\r\n  },\r\n  shim: {\r\n    'angular' : { deps: [ 'jquery' ], exports: 'angular' },\r\n    'angular-resource': { deps: [ 'angular' ] }\r\n  },\r\n  packages: [\r\n    // application package\r\n    { name: 'app', location: 'app' },\r\n\r\n    // other angular modules\r\n    { name: 'my-module', location: 'lib/my-module' },\r\n    { name: 'my-other-module', location: 'lib/my-other-module' }\r\n  ]\r\n});\r\n```\r\nThe following piece of code may then be used to bootstrap the application:\r\n\r\n```javascript\r\n// require ngDefine and all angular modules your app requires\r\nrequire([ 'ngDefine', 'angular' ], function(ngDefine, angular) {\r\n\r\n  // require the application\r\n  require('app', function() {\r\n\r\n    // bootstrap the application\r\n    angular.bootstrap(document.body, ['app']);\r\n  });\r\n});\r\n```\r\n\r\nIt ensures that __ngDefine__ is loaded before the application modules are defined.\r\nAdditionally it [bootstraps the AngularJS application](http://docs.angularjs.org/api/angular.bootstrap) after the application and its dependencies have been resolved.\r\n\r\n\r\nMinification<a id=\"minification\"></a>\r\n=====================================\r\n\r\nThe library provides the script __ngr.js__ that can be used to minify modules created using __ngDefine__. \r\n__ngr.js__ is a wrapper to the [RequireJS](http://requirejs.org/docs/optimization.html optimizer) and works in NodeJS and browser environments. \r\n\r\nTo expose the script as the __ngr__ task into [grunt](http://gruntjs.com/), use the following code snippet: \r\n\r\n```javascript\r\n// project configuration\r\ngrunt.initConfig({\r\n  // ...\r\n\r\n  ngr: {\r\n    minify: {\r\n      // supports all options r.js understands\r\n      options: {\r\n        name : 'app/main',\r\n        out: 'build/app.min.js'\r\n\r\n        // path, shim and package configurations \r\n        // ...\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n// sample task for ngDefine optimization\r\ngrunt.registerMultiTask('ngr', 'Minify app', function() {\r\n\r\n  var done = this.async();\r\n\r\n  var ngr = require('path/to/ngr.js');\r\n\r\n  ngr.optimize(this.data.options, function() {\r\n    done('success');\r\n  }, function(e) {\r\n    console.log('Error during minify: ', e);\r\n    done(new Error('With failures: ' + e));\r\n  });\r\n});\r\n```\r\n\r\n\r\nFAQ\r\n===\r\n\r\n#### Why should I use RequireJS? After all, AngularJS includes a dependency injection mechanism, doesn't it?<a id=\"why-should-i-use\"></a>\r\n\r\nAngularJS offers a dependency injection mechanism at runtime. \r\nWhen building applications a developer must know which script files to include into his application so that all runtime dependencies are met when the application is bootstrapped. \r\nAngularJS does not allow application developers to define these dependencies on the file level. \r\nHowever, that is exactly what RequireJS does. \r\n\r\n__ngDefine__ simply employs RequireJS and gives developers the ability to declare AngularJS modules and their dependencies in a portable way. \r\nThis way the modules can be reused and external dependencies can easily be resolved.\r\n\r\n\r\n#### ngDefine bridges the gap between RequireJS and AngularJS?\r\n\r\nNot quite, [read again](#why-should-i-use). There is no gap between RequireJS and AngularJS, as both serve different purposes during different stages of the application lifecycle. \r\n__ngDefine__ allows you to leverage the power of both technologies. \r\n\r\n\r\n#### Can an application that uses ngDefine be minified?\r\n\r\nYes, [minification can be done](#minification).\r\n\r\n\r\nLicense\r\n=======\r\n\r\nUse under terms of MIT license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}